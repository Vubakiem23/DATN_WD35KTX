<?php

namespace App\Http\Controllers;

use App\Models\LichBaoTri;
use App\Models\TaiSan;
use App\Models\Phong;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class LichBaoTriController extends Controller
{
    /** üß≠ Hi·ªÉn th·ªã danh s√°ch l·ªãch b·∫£o tr√¨ */
public function index(Request $request)
{
    $today = \Carbon\Carbon::today()->toDateString();

    // 1Ô∏è‚É£ Ho√†n th√†nh (ƒë√£ c√≥ ng√†y ho√†n th√†nh)
    DB::table('lich_bao_tri')
        ->whereNotNull('ngay_hoan_thanh')
        ->where('trang_thai', '!=', 'Ho√†n th√†nh')
        ->update(['trang_thai' => 'Ho√†n th√†nh', 'updated_at' => now()]);

    // 2Ô∏è‚É£ Ch·ªù b·∫£o tr√¨ (ng√†y b·∫£o tr√¨ > h√¥m nay, ch∆∞a ho√†n th√†nh)
    DB::table('lich_bao_tri')
        ->whereNull('ngay_hoan_thanh')
        ->whereDate('ngay_bao_tri', '>', $today)
        ->where('trang_thai', '!=', 'Ch·ªù b·∫£o tr√¨')
        ->update(['trang_thai' => 'Ch·ªù b·∫£o tr√¨', 'updated_at' => now()]);

    // 3Ô∏è‚É£ ƒêang b·∫£o tr√¨ (ng√†y b·∫£o tr√¨ <= h√¥m nay, ch∆∞a ho√†n th√†nh)
    DB::table('lich_bao_tri')
        ->whereNull('ngay_hoan_thanh')
        ->whereDate('ngay_bao_tri', '<=', $today)
        ->where('trang_thai', '!=', 'ƒêang b·∫£o tr√¨')
        ->update(['trang_thai' => 'ƒêang b·∫£o tr√¨', 'updated_at' => now()]);

    // Sau ƒë√≥ load danh s√°ch
    $lich = LichBaoTri::with('taiSan')
        ->orderByRaw("
            CASE 
                WHEN trang_thai = 'Ch·ªù b·∫£o tr√¨' THEN 1
                WHEN trang_thai = 'ƒêang b·∫£o tr√¨' THEN 2
                WHEN trang_thai = 'Ho√†n th√†nh' THEN 3
                ELSE 4
            END ASC
        ")
        ->orderBy('ngay_bao_tri', 'asc')
        ->paginate(6);

    return view('lichbaotri.index', compact('lich'));
}

    /** ‚ûï Form t·∫°o m·ªõi */
  public function create(Request $request)
{
    $phongs = Phong::all();
    $taiSan = TaiSan::with('phong')->get();

    // üÜï L·∫•y id t√†i s·∫£n n·∫øu c√≥ trong URL
    $selectedTaiSanId = $request->taisan_id;

    // üÜï L·∫•y chi ti·∫øt t√†i s·∫£n ƒë∆∞·ª£c ch·ªçn (n·∫øu c√≥)
    $selectedTaiSan = null;
    if ($selectedTaiSanId) {
        $selectedTaiSan = TaiSan::with('phong')->find($selectedTaiSanId);
    }

    return view('lichbaotri.create', compact('phongs', 'taiSan', 'selectedTaiSanId', 'selectedTaiSan'));
}


    /** üíæ L∆∞u l·ªãch b·∫£o tr√¨ m·ªõi */
    public function store(Request $request)
    {
        $request->validate([
            'tai_san_id' => 'required|exists:tai_san,id',
            'ngay_bao_tri' => 'required|date',
            'ngay_hoan_thanh' => 'nullable|date',
            'mo_ta' => 'nullable|string',
            'hinh_anh' => 'nullable|image|mimes:jpg,jpeg,png|max:2048',
        ]);

        // üì∏ Upload ·∫£nh
        $fileName = null;
        if ($request->hasFile('hinh_anh')) {
            if (!file_exists(public_path('uploads/lichbaotri'))) {
                mkdir(public_path('uploads/lichbaotri'), 0777, true);
            }

            $file = $request->file('hinh_anh');
            $fileName = time() . '_' . $file->getClientOriginalName();
            $file->move(public_path('uploads/lichbaotri'), $fileName);
        }

        // üîÅ X√°c ƒë·ªãnh tr·∫°ng th√°i ban ƒë·∫ßu
        if ($request->ngay_hoan_thanh) {
            $trangThai = 'Ho√†n th√†nh';
        } elseif ($request->ngay_bao_tri > now()->toDateString()) {
            $trangThai = 'Ch·ªù b·∫£o tr√¨';
        } else {
            $trangThai = 'ƒêang b·∫£o tr√¨';
        }

        // üíæ L∆∞u v√†o DB
        LichBaoTri::create([
            'tai_san_id' => $request->tai_san_id,
            'ngay_bao_tri' => $request->ngay_bao_tri,
            'ngay_hoan_thanh' => $request->ngay_hoan_thanh,
            'mo_ta' => $request->mo_ta,
            'hinh_anh' => $fileName,
            'trang_thai' => $trangThai,
        ]);

        return redirect()->route('lichbaotri.index')->with('success', 'Th√™m l·ªãch b·∫£o tr√¨ th√†nh c√¥ng!');
    }

    /** ‚úèÔ∏è Form s·ª≠a */
    public function edit($id)
    {
        $lichBaoTri = LichBaoTri::findOrFail($id);
        $taiSan = TaiSan::with('phong')->get();
        return view('lichbaotri.edit', compact('lichBaoTri', 'taiSan'));
    }

    /** üîÑ C·∫≠p nh·∫≠t l·ªãch b·∫£o tr√¨ */
    public function update(Request $request, $id)
    {
        $lichBaoTri = LichBaoTri::findOrFail($id);

        $request->validate([
            'tai_san_id' => 'required|exists:tai_san,id',
            'ngay_bao_tri' => 'required|date',
            'ngay_hoan_thanh' => 'nullable|date',
            'mo_ta' => 'nullable|string',
            'hinh_anh' => 'nullable|image|mimes:jpg,jpeg,png|max:2048',
        ]);

        // üì∏ Upload ·∫£nh m·ªõi (n·∫øu c√≥)
        $fileName = $lichBaoTri->hinh_anh;
        if ($request->hasFile('hinh_anh')) {
            if (!file_exists(public_path('uploads/lichbaotri'))) {
                mkdir(public_path('uploads/lichbaotri'), 0777, true);
            }

            if ($fileName && file_exists(public_path('uploads/lichbaotri/' . $fileName))) {
                unlink(public_path('uploads/lichbaotri/' . $fileName));
            }

            $file = $request->file('hinh_anh');
            $fileName = time() . '_' . $file->getClientOriginalName();
            $file->move(public_path('uploads/lichbaotri'), $fileName);
        }

        // üîÅ C·∫≠p nh·∫≠t tr·∫°ng th√°i
        if ($request->ngay_hoan_thanh) {
            $trangThai = 'Ho√†n th√†nh';
        } elseif ($request->ngay_bao_tri > now()->toDateString()) {
            $trangThai = 'Ch·ªù b·∫£o tr√¨';
        } else {
            $trangThai = 'ƒêang b·∫£o tr√¨';
        }

        $lichBaoTri->update([
            'tai_san_id' => $request->tai_san_id,
            'ngay_bao_tri' => $request->ngay_bao_tri,
            'ngay_hoan_thanh' => $request->ngay_hoan_thanh,
            'mo_ta' => $request->mo_ta,
            'hinh_anh' => $fileName,
            'trang_thai' => $trangThai,
        ]);

        return redirect()->route('lichbaotri.index')->with('success', 'C·∫≠p nh·∫≠t l·ªãch b·∫£o tr√¨ th√†nh c√¥ng!');
    }

    /** ‚ùå X√≥a l·ªãch b·∫£o tr√¨ */
    public function destroy($id)
    {
        $lichBaoTri = LichBaoTri::findOrFail($id);

        if ($lichBaoTri->hinh_anh && file_exists(public_path('uploads/lichbaotri/' . $lichBaoTri->hinh_anh))) {
            unlink(public_path('uploads/lichbaotri/' . $lichBaoTri->hinh_anh));
        }

        $lichBaoTri->delete();

        return redirect()->route('lichbaotri.index')->with('success', 'ƒê√£ x√≥a l·ªãch b·∫£o tr√¨ th√†nh c√¥ng!');
    }

    /** ‚úÖ ƒê√°nh d·∫•u ho√†n th√†nh */
    public function hoanThanh($id)
    {
        $lichBaoTri = LichBaoTri::findOrFail($id);

        $lichBaoTri->update([
            'trang_thai' => 'Ho√†n th√†nh',
            'ngay_hoan_thanh' => now()->toDateString(),
        ]);

        return redirect()->route('lichbaotri.index')->with('success', 'ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ho√†n th√†nh!');
    }
    public function showModal($id)
{
    $lich = LichBaoTri::with('taiSan')->find($id);

    if (!$lich) {
        return response()->json(['data' => '<p class="text-danger">Kh√¥ng t√¨m th·∫•y l·ªãch b·∫£o tr√¨.</p>']);
    }

    $html = view('lichbaotri._modal', compact('lich'))->render();

    return response()->json(['data' => $html]);
}

}
