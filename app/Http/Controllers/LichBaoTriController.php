<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\LichBaoTri;
use App\Models\TaiSan;
use App\Models\KhoTaiSan;
use Illuminate\Support\Facades\DB;

class LichBaoTriController extends Controller
{
    /** üß≠ Hi·ªÉn th·ªã danh s√°ch l·ªãch b·∫£o tr√¨ */
    public function index()
    {
        $today = now()->toDateString();

        // üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª± ƒë·ªông
        DB::table('lich_bao_tri')
            ->whereNotNull('ngay_hoan_thanh')
            ->where('trang_thai', '!=', 'Ho√†n th√†nh')
            ->update(['trang_thai' => 'Ho√†n th√†nh', 'updated_at' => now()]);

        DB::table('lich_bao_tri')
            ->whereNull('ngay_hoan_thanh')
            ->whereDate('ngay_bao_tri', '>', $today)
            ->where('trang_thai', '!=', 'Ch·ªù b·∫£o tr√¨')
            ->update(['trang_thai' => 'Ch·ªù b·∫£o tr√¨', 'updated_at' => now()]);

        DB::table('lich_bao_tri')
            ->whereNull('ngay_hoan_thanh')
            ->whereDate('ngay_bao_tri', '<=', $today)
            ->where('trang_thai', '!=', 'ƒêang b·∫£o tr√¨')
            ->update(['trang_thai' => 'ƒêang b·∫£o tr√¨', 'updated_at' => now()]);

        $lich = LichBaoTri::with(['taiSan.phong', 'khoTaiSan'])
            ->orderByRaw("
                CASE 
                    WHEN trang_thai = 'Ch·ªù b·∫£o tr√¨' THEN 1
                    WHEN trang_thai = 'ƒêang b·∫£o tr√¨' THEN 2
                    WHEN trang_thai = 'Ho√†n th√†nh' THEN 3
                    ELSE 4
                END ASC
            ")
            ->orderBy('ngay_bao_tri', 'asc')
            ->paginate(6);

        return view('lichbaotri.index', compact('lich'));
    }

    /** ‚ûï Form t·∫°o m·ªõi */
    public function create()
    {
        $taiSanPhong = TaiSan::with('phong')->whereNotNull('phong_id')->get();
        $khoTaiSans = KhoTaiSan::all();

        return view('lichbaotri.create', compact('taiSanPhong', 'khoTaiSans'));
    }

    /** üíæ L∆∞u l·ªãch b·∫£o tr√¨ m·ªõi */
    public function store(Request $request)
    {
        $request->validate([
            'tai_san_or_kho' => 'required|string',
            'ngay_bao_tri' => 'required|date',
            'mo_ta' => 'nullable|string',
            'hinh_anh_truoc' => 'nullable|image|mimes:jpg,jpeg,png|max:2048',
        ]);

        // üñºÔ∏è L∆∞u ·∫£nh tr∆∞·ªõc b·∫£o tr√¨
        $hinhAnhTruoc = null;
        if ($request->hasFile('hinh_anh_truoc')) {
            $file = $request->file('hinh_anh_truoc');
            $hinhAnhTruoc = time() . '_truoc_' . $file->getClientOriginalName();
            $file->move(public_path('uploads/lichbaotri'), $hinhAnhTruoc);
        }

        // üîç X√°c ƒë·ªãnh l√† t√†i s·∫£n trong ph√≤ng hay kho
        $taiSanId = null;
        $khoTaiSanId = null;

        if (str_starts_with($request->tai_san_or_kho, 'ts_')) {
            $taiSanId = (int) str_replace('ts_', '', $request->tai_san_or_kho);
        } else {
            $khoTaiSanId = (int) str_replace('kho_', '', $request->tai_san_or_kho);
        }

        // üïê Tr·∫°ng th√°i ban ƒë·∫ßu
        $today = now()->toDateString();
        $trangThai = $request->ngay_bao_tri > $today ? 'Ch·ªù b·∫£o tr√¨' : 'ƒêang b·∫£o tr√¨';

        // üíæ L∆∞u v√†o DB
        LichBaoTri::create([
            'tai_san_id' => $taiSanId,
            'kho_tai_san_id' => $khoTaiSanId,
            'ngay_bao_tri' => $request->ngay_bao_tri,
            'mo_ta' => $request->mo_ta,
            'hinh_anh_truoc' => $hinhAnhTruoc,
            'trang_thai' => $trangThai,
        ]);

        return redirect()->route('lichbaotri.index')->with('success', 'Th√™m l·ªãch b·∫£o tr√¨ th√†nh c√¥ng!');
    }

    /** üíæ C·∫≠p nh·∫≠t ho√†n th√†nh */
    public function hoanThanhSubmit(Request $request, $id)
    {
        $lichBaoTri = LichBaoTri::findOrFail($id);

        $request->validate([
            'ngay_hoan_thanh' => 'required|date',
            'hinh_anh_sau' => 'nullable|image|mimes:jpg,jpeg,png|max:2048',
        ]);

        // üñºÔ∏è ·∫¢nh sau b·∫£o tr√¨
        $hinhAnhSau = $lichBaoTri->hinh_anh;
        if ($request->hasFile('hinh_anh_sau')) {
            if ($hinhAnhSau && file_exists(public_path('uploads/lichbaotri/' . $hinhAnhSau))) {
                unlink(public_path('uploads/lichbaotri/' . $hinhAnhSau));
            }

            $file = $request->file('hinh_anh_sau');
            $hinhAnhSau = time() . '_sau_' . $file->getClientOriginalName();
            $file->move(public_path('uploads/lichbaotri'), $hinhAnhSau);
        }

        $lichBaoTri->update([
            'ngay_hoan_thanh' => $request->ngay_hoan_thanh,
            'hinh_anh' => $hinhAnhSau, // ‚úÖ c·ªôt ƒë√∫ng
            'trang_thai' => 'Ho√†n th√†nh',
        ]);

        return redirect()->route('lichbaotri.index')->with('success', 'C·∫≠p nh·∫≠t ho√†n th√†nh th√†nh c√¥ng!');
    }

    /** üóëÔ∏è X√≥a l·ªãch b·∫£o tr√¨ */
    public function destroy($id)
    {
        $lich = LichBaoTri::findOrFail($id);

        foreach (['hinh_anh_truoc', 'hinh_anh'] as $imgField) {
            if ($lich->$imgField && file_exists(public_path('uploads/lichbaotri/' . $lich->$imgField))) {
                unlink(public_path('uploads/lichbaotri/' . $lich->$imgField));
            }
        }

        $lich->delete();
        return redirect()->route('lichbaotri.index')->with('success', 'X√≥a l·ªãch b·∫£o tr√¨ th√†nh c√¥ng!');
    }

    /** üëÅÔ∏è Xem chi ti·∫øt (hi·ªÉn th·ªã modal) */
    public function show($id)
    {
        $lich = LichBaoTri::with(['taiSan.phong', 'khoTaiSan'])->findOrFail($id);
        return view('lichbaotri._modal', compact('lich'));
    }
   public function edit($id)
{
    $lichBaoTri = LichBaoTri::findOrFail($id);
    $taiSan = TaiSan::all();
    $khoTaiSan = KhoTaiSan::all(); // n·∫øu c·∫ßn d√πng trong form
    return view('lichbaotri.edit', compact('lichBaoTri', 'taiSan', 'khoTaiSan'));
}


    public function update(Request $request, $id)
{
    // L·∫•y l·ªãch b·∫£o tr√¨ theo ID
    $lich = LichBaoTri::findOrFail($id);

    // C·∫≠p nh·∫≠t c√°c th√¥ng tin c∆° b·∫£n
    $lich->ngay_bao_tri = $request->ngay_bao_tri;
    $lich->ngay_hoan_thanh = $request->ngay_hoan_thanh; // ng√†y ho√†n th√†nh
    $lich->mo_ta = $request->mo_ta;
    $lich->trang_thai = $request->trang_thai; // tr·∫°ng th√°i

    // C·∫≠p nh·∫≠t ·∫£nh tr∆∞·ªõc b·∫£o tr√¨ n·∫øu c√≥
    if ($request->hasFile('hinh_anh_truoc')) {
        $file = $request->file('hinh_anh_truoc');
        $fileName = time() . '_' . $file->getClientOriginalName();
        $file->move(public_path('uploads/lichbaotri'), $fileName);
        $lich->hinh_anh_truoc = $fileName;
    }

    // C·∫≠p nh·∫≠t ·∫£nh sau b·∫£o tr√¨ n·∫øu c√≥
    if ($request->hasFile('hinh_anh')) {
        $file = $request->file('hinh_anh');
        $fileName = time() . '_' . $file->getClientOriginalName();
        $file->move(public_path('uploads/lichbaotri'), $fileName);
        $lich->hinh_anh = $fileName;
    }

    // L∆∞u t·∫•t c·∫£ thay ƒë·ªïi
    $lich->save();

    // Chuy·ªÉn h∆∞·ªõng v·ªÅ danh s√°ch v·ªõi th√¥ng b√°o th√†nh c√¥ng
    return redirect()->route('lichbaotri.index')->with('success', 'C·∫≠p nh·∫≠t l·ªãch b·∫£o tr√¨ th√†nh c√¥ng!');
}

}
