<?php

namespace App\Http\Controllers;

use App\Models\TaiSan;
use App\Models\KhoTaiSan;
use App\Models\Phong;
use Illuminate\Http\Request;

class TaiSanController extends Controller
{
    /** üìã Danh s√°ch t√†i s·∫£n trong ph√≤ng */
    public function index(Request $request)
    {
        $phongs = Phong::orderBy('ten_phong')->get();

        $listTaiSan = TaiSan::with(['khoTaiSan', 'phong'])
            ->when($request->search, function ($query, $search) {
                $query->whereHas('khoTaiSan', function ($q) use ($search) {
                    $q->where('ma_tai_san', 'like', "%$search%")
                        ->orWhere('ten_tai_san', 'like', "%$search%");
                });
            })
            ->when($request->phong_id, function ($query, $phong_id) {
                $query->where('phong_id', $phong_id);
            })
            ->paginate(6);

        return view('taisan.index', compact('listTaiSan', 'phongs'));
    }

    /** ‚ûï Form th√™m t√†i s·∫£n v√†o ph√≤ng */
    public function create()
    {
        $phongs = Phong::all();
        $khoTaiSans = KhoTaiSan::where('so_luong', '>', 0)
            ->orderBy('ten_tai_san')
            ->get(); // ch·ªâ l·∫•y t√†i s·∫£n c√≤n trong kho
        return view('taisan.create', compact('phongs', 'khoTaiSans'));
    }

    /** üíæ L∆∞u t√†i s·∫£n ph√≤ng v√† tr·ª´ kho */
    public function store(Request $request)
    {
        $request->validate([
            'kho_tai_san_id' => 'required|exists:kho_tai_san,id',
            'phong_id' => 'required|exists:phong,id',
            'so_luong' => 'required|integer|min:1',
            'tinh_trang' => 'nullable|string|max:255',
        ]);

        $kho = KhoTaiSan::findOrFail($request->kho_tai_san_id);

        if ($kho->so_luong < $request->so_luong) {
            return back()->with('error', 'S·ªë l∆∞·ª£ng trong kho kh√¥ng ƒë·ªß!');
        }

        TaiSan::create([
            'kho_tai_san_id' => $kho->id,
            'ten_tai_san' => $kho->ten_tai_san,
            'phong_id' => $request->phong_id,
            'so_luong' => $request->so_luong,
            'tinh_trang' => $request->tinh_trang,
            'hinh_anh' => 'taisan/' . $kho->hinh_anh,
        ]);

        $kho->decrement('so_luong', $request->so_luong);

        return redirect()->route('taisan.index')->with('success', 'Th√™m t√†i s·∫£n th√†nh c√¥ng v√† tr·ª´ kho!');
    }

    /** ‚úèÔ∏è Form ch·ªânh s·ª≠a t√†i s·∫£n ph√≤ng */
    public function edit($id)
    {
        $taiSan = TaiSan::findOrFail($id);
        $phongs = Phong::all();
        $khoTaiSans = KhoTaiSan::orderBy('ten_tai_san')->get();
        return view('taisan.edit', compact('taiSan', 'phongs', 'khoTaiSans'));
    }

    /** üîÑ C·∫≠p nh·∫≠t t√†i s·∫£n ph√≤ng */
    /** üîÑ C·∫≠p nh·∫≠t t√†i s·∫£n ph√≤ng */
    public function update(Request $request, $id)
    {
        $taiSan = TaiSan::findOrFail($id);

        $request->validate([
            'ten_tai_san' => 'required|string|max:255',
            'kho_tai_san_id' => 'required|exists:kho_tai_san,id',
            'phong_id' => 'required|exists:phong,id',
            'so_luong' => 'required|integer|min:1',
            'tinh_trang' => 'nullable|string|max:255',
            'tinh_trang_hien_tai' => 'nullable|string|max:255',
        ]);

        $kho = KhoTaiSan::findOrFail($request->kho_tai_san_id);
        $chenhLech = $request->so_luong - $taiSan->so_luong;

        // Ki·ªÉm tra t·ªìn kho khi tƒÉng s·ªë l∆∞·ª£ng
        if ($chenhLech > 0 && $kho->so_luong < $chenhLech) {
            return back()->with('error', 'Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho ƒë·ªÉ tƒÉng t√†i s·∫£n!');
        }

        // C·∫≠p nh·∫≠t l·∫°i kho n·∫øu s·ªë l∆∞·ª£ng thay ƒë·ªïi
        if ($chenhLech > 0) {
            $kho->decrement('so_luong', $chenhLech);
        } elseif ($chenhLech < 0) {
            $kho->increment('so_luong', abs($chenhLech));
        }

        // C·∫≠p nh·∫≠t th√¥ng tin t√†i s·∫£n
        $taiSan->update([
            'kho_tai_san_id' => $kho->id,
            'ten_tai_san' => $kho->ten_tai_san,
            'phong_id' => $request->phong_id,
            'so_luong' => $request->so_luong,
            'tinh_trang' => $request->tinh_trang,
            'tinh_trang_hien_tai' => $request->tinh_trang_hien_tai,
        ]);

        return redirect()->route('taisan.index')->with('success', 'C·∫≠p nh·∫≠t t√†i s·∫£n th√†nh c√¥ng!');
    }

    public function destroy($id)
    {
        $taiSan = TaiSan::findOrFail($id);
        $kho = KhoTaiSan::find($taiSan->kho_tai_san_id);

        if ($kho) {
            $kho->increment('so_luong', $taiSan->so_luong);
        }

        $taiSan->delete();

        return redirect()->route('taisan.index')->with('success', 'ƒê√£ x√≥a t√†i s·∫£n v√† ho√†n kho th√†nh c√¥ng!');
    }

    /** üñºÔ∏è Modal xem chi ti·∫øt */
    public function showModal($id)
    {
        $taiSan = TaiSan::with(['phong', 'khoTaiSan'])->find($id);
        if (!$taiSan) {
            return response()->json(['data' => '<p class="text-danger">Kh√¥ng t√¨m th·∫•y t√†i s·∫£n.</p>']);
        }

        $html = view('taisan._modal', compact('taiSan'))->render();
        return response()->json(['data' => $html]);
    }
}
