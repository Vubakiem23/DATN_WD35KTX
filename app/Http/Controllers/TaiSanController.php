<?php

namespace App\Http\Controllers;

use App\Models\TaiSan;
use App\Models\KhoTaiSan;
use App\Models\Phong;
use Illuminate\Http\Request;

class TaiSanController extends Controller
{
    /** üìã Danh s√°ch t√†i s·∫£n trong ph√≤ng */
public function index(Request $request)
{
    $phongs = Phong::orderBy('ten_phong')->get();

    $listTaiSan = TaiSan::with(['khoTaiSan', 'phong'])
        ->when($request->search, function($query, $search) {
            $query->whereHas('khoTaiSan', function($q) use ($search) {
                $q->where('ma_tai_san', 'like', "%$search%")
                  ->orWhere('ten_tai_san', 'like', "%$search%");
            });
        })
        ->when($request->phong_id, function($query, $phong_id) {
            $query->where('phong_id', $phong_id);
        })
        ->paginate(5); // üëà Ch·ªâ hi·ªÉn th·ªã 5 d√≤ng m·ªói trang

    return view('taisan.index', compact('listTaiSan', 'phongs'));
}

    /** ‚ûï Hi·ªÉn th·ªã form th√™m t√†i s·∫£n */
    public function create()
    {
        $phongs = Phong::all();
        $khoTaiSans = KhoTaiSan::where('so_luong', '>', 0)->orderBy('ten_tai_san')->get(); // üì¶ ch·ªâ l·∫•y c√≤n h√†ng
        return view('taisan.create', compact('phongs', 'khoTaiSans'));
    }

    /** üíæ L∆∞u t√†i s·∫£n m·ªõi + tr·ª´ s·ªë l∆∞·ª£ng kho */
    public function store(Request $request)
    {
        $request->validate([
            'kho_tai_san_id' => 'required|exists:kho_tai_san,id',
            'so_luong' => 'required|integer|min:1',
            'tinh_trang' => 'nullable|string|max:255',
            'tinh_trang_hien_tai' => 'nullable|string|max:255',
            'phong_id' => 'nullable|exists:phong,id',
        ]);

        $kho = KhoTaiSan::findOrFail($request->kho_tai_san_id);

        // üî∏ Ki·ªÉm tra s·ªë l∆∞·ª£ng c√≤n ƒë·ªß kh√¥ng
        if ($kho->so_luong < $request->so_luong) {
            return back()->with('error', 'S·ªë l∆∞·ª£ng trong kho kh√¥ng ƒë·ªß ƒë·ªÉ c·∫•p cho ph√≤ng!');
        }

        // üî∏ T·∫°o t√†i s·∫£n ph√≤ng
        TaiSan::create([
            'kho_tai_san_id' => $request->kho_tai_san_id,
            'ten_tai_san' => $kho->ten_tai_san,
            'so_luong' => $request->so_luong,
            'tinh_trang' => $request->tinh_trang,
            'tinh_trang_hien_tai' => $request->tinh_trang_hien_tai,
            'phong_id' => $request->phong_id,
            'hinh_anh' => $kho->hinh_anh,
        ]);

        // üî∏ Tr·ª´ s·ªë l∆∞·ª£ng trong kho
        $kho->so_luong -= $request->so_luong;
        $kho->save();

        return redirect()->route('taisan.index')->with('success', 'Th√™m t√†i s·∫£n cho ph√≤ng th√†nh c√¥ng v√† ƒë√£ tr·ª´ kho!');
    }

    /** ‚úèÔ∏è Form ch·ªânh s·ª≠a */
    public function edit($id)
    {
        $taiSan = TaiSan::findOrFail($id);
        $phongs = Phong::all();
        $khoTaiSans = KhoTaiSan::orderBy('ten_tai_san')->get();
        return view('taisan.edit', compact('taiSan', 'phongs', 'khoTaiSans'));
    }

    /** üîÑ C·∫≠p nh·∫≠t t√†i s·∫£n */
    public function update(Request $request, $id)
{
    $taiSan = TaiSan::findOrFail($id);

    $request->validate([
        'kho_tai_san_id' => 'required|exists:kho_tai_san,id',
        'so_luong' => 'required|integer|min:1',
        'tinh_trang' => 'nullable|string|max:255',
        'tinh_trang_hien_tai' => 'nullable|string|max:255',
        'phong_id' => 'nullable|exists:phong,id',
    ]);

    $kho = KhoTaiSan::findOrFail($request->kho_tai_san_id);

    // üîÑ T√≠nh ch√™nh l·ªách s·ªë l∆∞·ª£ng
    $chenhLech = $request->so_luong - $taiSan->so_luong;

    // ‚úÖ N·∫øu tƒÉng t√†i s·∫£n ph√≤ng ‚Üí tr·ª´ kho
    if ($chenhLech > 0) {
        if ($kho->so_luong < $chenhLech) {
            return back()->with('error', 'Kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho!');
        }
        $kho->so_luong -= $chenhLech;
    } 
    // ‚úÖ N·∫øu gi·∫£m t√†i s·∫£n ph√≤ng ‚Üí c·ªông l·∫°i v√†o kho
    elseif ($chenhLech < 0) {
        $kho->so_luong += abs($chenhLech);
    }

    $kho->save();

    // üîß C·∫≠p nh·∫≠t l·∫°i t√†i s·∫£n ph√≤ng
    $taiSan->update([
        'kho_tai_san_id' => $request->kho_tai_san_id,
        'ten_tai_san' => $kho->ten_tai_san,
        'so_luong' => $request->so_luong,
        'tinh_trang' => $request->tinh_trang,
        'tinh_trang_hien_tai' => $request->tinh_trang_hien_tai,
        'phong_id' => $request->phong_id,
        'hinh_anh' => $kho->hinh_anh,
    ]);

    return redirect()->route('taisan.index')->with('success', 'C·∫≠p nh·∫≠t t√†i s·∫£n th√†nh c√¥ng v√† ƒë·ªìng b·ªô v·ªõi kho!');
}

    public function destroy($id)
    {
        $taiSan = TaiSan::findOrFail($id);
        $kho = KhoTaiSan::find($taiSan->kho_tai_san_id);

        if ($kho) {
            $kho->so_luong += $taiSan->so_luong;
            $kho->save();
        }

        $taiSan->delete();

        return redirect()->route('taisan.index')->with('success', 'ƒê√£ x√≥a t√†i s·∫£n kh·ªèi ph√≤ng v√† ho√†n kho th√†nh c√¥ng!');
    }
}
